// <auto-generated />
using System;
using BeanSceneSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeanSceneSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240630001259_updatedatabse")]
    partial class updatedatabse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeanSceneSystem.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BeanSceneSystem.Models.Area", b =>
                {
                    b.Property<int>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaID"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AreaID");

                    b.ToTable("Areas", t =>
                        {
                            t.HasCheckConstraint("CHK_AreaName", "AreaName IN ('Main', 'Outside', 'Balcony')");
                        });

                    b.HasData(
                        new
                        {
                            AreaID = 1,
                            AreaName = "Main"
                        },
                        new
                        {
                            AreaID = 2,
                            AreaName = "Outside"
                        },
                        new
                        {
                            AreaID = 3,
                            AreaName = "Balcony"
                        });
                });

            modelBuilder.Entity("BeanSceneSystem.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MemberID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumOfGuests")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReservationSource")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SittingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TableID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("SittingID");

                    b.HasIndex("TableID");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationID = 1,
                            Duration = 90,
                            Email = "sarah@example.com",
                            GuestName = "Sarah Johnson",
                            Notes = "Near the bar",
                            NumOfGuests = 3,
                            Phone = "444-555-6666",
                            ReservationSource = "Mobile",
                            SittingID = 2,
                            StartTime = new DateTime(2023, 10, 17, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TableID = 5
                        },
                        new
                        {
                            ReservationID = 2,
                            Duration = 120,
                            Email = "michael@example.com",
                            GuestName = "Michael Wilson",
                            Notes = "Special dietary needs",
                            NumOfGuests = 4,
                            Phone = "777-888-9999",
                            ReservationSource = "Email",
                            SittingID = 2,
                            StartTime = new DateTime(2023, 10, 17, 19, 45, 0, 0, DateTimeKind.Unspecified),
                            Status = "Confirmed",
                            TableID = 9
                        },
                        new
                        {
                            ReservationID = 3,
                            Duration = 90,
                            Email = "grace@example.com",
                            GuestName = "Grace Brown",
                            NumOfGuests = 2,
                            ReservationSource = "In-person",
                            SittingID = 4,
                            StartTime = new DateTime(2023, 10, 19, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Seated",
                            TableID = 8
                        },
                        new
                        {
                            ReservationID = 4,
                            Duration = 60,
                            Email = "oliver@example.com",
                            GuestName = "Oliver Taylor",
                            Notes = "Preferred by the window",
                            NumOfGuests = 2,
                            Phone = "222-333-4444",
                            ReservationSource = "Mobile",
                            SittingID = 4,
                            StartTime = new DateTime(2023, 10, 19, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = "Confirmed",
                            TableID = 6
                        },
                        new
                        {
                            ReservationID = 5,
                            Duration = 120,
                            Email = "emma@example.com",
                            GuestName = "Emma Clark",
                            Notes = "Celebrating a birthday",
                            NumOfGuests = 4,
                            ReservationSource = "Online",
                            SittingID = 1,
                            StartTime = new DateTime(2023, 10, 16, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TableID = 3
                        },
                        new
                        {
                            ReservationID = 6,
                            Duration = 90,
                            Email = "william@example.com",
                            GuestName = "William Smith",
                            Notes = "Quiet area",
                            NumOfGuests = 2,
                            Phone = "123-987-6543",
                            ReservationSource = "Phone",
                            SittingID = 3,
                            StartTime = new DateTime(2023, 10, 18, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Confirmed",
                            TableID = 10
                        },
                        new
                        {
                            ReservationID = 7,
                            Duration = 90,
                            Email = "sophia@example.com",
                            GuestName = "Sophia Wilson",
                            NumOfGuests = 3,
                            ReservationSource = "Mobile",
                            SittingID = 2,
                            StartTime = new DateTime(2023, 10, 17, 20, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = "Cancelled",
                            TableID = 11
                        },
                        new
                        {
                            ReservationID = 8,
                            Duration = 60,
                            Email = "james@example.com",
                            GuestName = "James Adams",
                            NumOfGuests = 2,
                            Phone = "777-555-8888",
                            ReservationSource = "In-person",
                            SittingID = 1,
                            StartTime = new DateTime(2023, 10, 16, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Seated",
                            TableID = 4
                        },
                        new
                        {
                            ReservationID = 9,
                            Duration = 90,
                            Email = "ava@example.com",
                            GuestName = "Ava Harris",
                            Notes = "Vegetarian menu",
                            NumOfGuests = 2,
                            Phone = "111-999-3333",
                            ReservationSource = "Online",
                            SittingID = 3,
                            StartTime = new DateTime(2023, 10, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Confirmed",
                            TableID = 7
                        },
                        new
                        {
                            ReservationID = 10,
                            Duration = 120,
                            Email = "liam@example.com",
                            GuestName = "Liam Lee",
                            Notes = "Large group",
                            NumOfGuests = 6,
                            ReservationSource = "Mobile",
                            SittingID = 4,
                            StartTime = new DateTime(2023, 10, 19, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Confirmed",
                            TableID = 1
                        });
                });

            modelBuilder.Entity("BeanSceneSystem.Models.Schedule", b =>
                {
                    b.Property<int>("SittingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SittingID"));

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SCapacity")
                        .HasColumnType("int");

                    b.Property<string>("SType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("SittingID");

                    b.ToTable("Schedules", t =>
                        {
                            t.HasCheckConstraint("CHK_SittingType", "SType IN ('Breakfast', 'Lunch', 'Dinner', 'Special Event')");
                        });

                    b.HasData(
                        new
                        {
                            SittingID = 1,
                            EndDateTime = new DateTime(2023, 10, 16, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SCapacity = 30,
                            SType = "Breakfast",
                            StartDateTime = new DateTime(2023, 10, 16, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Open"
                        },
                        new
                        {
                            SittingID = 2,
                            EndDateTime = new DateTime(2023, 10, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            SCapacity = 40,
                            SType = "Lunch",
                            StartDateTime = new DateTime(2023, 10, 16, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Open"
                        },
                        new
                        {
                            SittingID = 3,
                            EndDateTime = new DateTime(2023, 10, 16, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            SCapacity = 50,
                            SType = "Dinner",
                            StartDateTime = new DateTime(2023, 10, 16, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Closed"
                        },
                        new
                        {
                            SittingID = 4,
                            EndDateTime = new DateTime(2023, 11, 20, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            SCapacity = 60,
                            SType = "Special Event",
                            StartDateTime = new DateTime(2023, 11, 20, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Open"
                        });
                });

            modelBuilder.Entity("BeanSceneSystem.Models.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StaffType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StaffID");

                    b.ToTable("Staffs", t =>
                        {
                            t.HasCheckConstraint("CHK_StaffType", "StaffType IN ('Staff', 'Manager')");
                        });

                    b.HasData(
                        new
                        {
                            StaffID = 1,
                            Email = "alice.smith@example.com",
                            FirstName = "Alice",
                            LastName = "Smith",
                            Password = "hashed_password_4",
                            Phone = "555-123-4567",
                            StaffType = "Staff"
                        },
                        new
                        {
                            StaffID = 2,
                            Email = "david.wilson@example.com",
                            FirstName = "David",
                            LastName = "Wilson",
                            Password = "hashed_password_5",
                            Phone = "888-987-6543",
                            StaffType = "Manager"
                        },
                        new
                        {
                            StaffID = 3,
                            Email = "eva.johnson@example.com",
                            FirstName = "Eva",
                            LastName = "Johnson",
                            Password = "hashed_password_6",
                            Phone = "777-555-8888",
                            StaffType = "Staff"
                        });
                });

            modelBuilder.Entity("BeanSceneSystem.Models.StaffPermission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionID");

                    b.HasIndex("StaffID");

                    b.ToTable("StaffPermissions", t =>
                        {
                            t.HasCheckConstraint("CHK_PermissionType", "PermissionType IN ('Admin', 'User')");
                        });

                    b.HasData(
                        new
                        {
                            PermissionID = 1,
                            PermissionType = "Admin",
                            StaffID = 2,
                            TableName = "All"
                        });
                });

            modelBuilder.Entity("BeanSceneSystem.Models.Table", b =>
                {
                    b.Property<int>("TableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableID"));

                    b.Property<int>("AreaID")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TableStatus")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("TableID");

                    b.HasIndex("AreaID");

                    b.ToTable("Tables", t =>
                        {
                            t.HasCheckConstraint("CHK_TableStatus", "TableStatus IN ('Booked', 'Free')");
                        });

                    b.HasData(
                        new
                        {
                            TableID = 1,
                            AreaID = 1,
                            TableName = "M1",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 2,
                            AreaID = 1,
                            TableName = "M2",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 3,
                            AreaID = 1,
                            TableName = "M3",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 4,
                            AreaID = 1,
                            TableName = "M4",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 5,
                            AreaID = 1,
                            TableName = "M5",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 6,
                            AreaID = 1,
                            TableName = "M6",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 7,
                            AreaID = 1,
                            TableName = "M7",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 8,
                            AreaID = 1,
                            TableName = "M8",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 9,
                            AreaID = 1,
                            TableName = "M9",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 10,
                            AreaID = 1,
                            TableName = "M10",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 11,
                            AreaID = 2,
                            TableName = "O1",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 12,
                            AreaID = 2,
                            TableName = "O2",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 13,
                            AreaID = 2,
                            TableName = "O3",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 14,
                            AreaID = 2,
                            TableName = "O4",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 15,
                            AreaID = 2,
                            TableName = "O5",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 16,
                            AreaID = 2,
                            TableName = "O6",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 17,
                            AreaID = 2,
                            TableName = "O7",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 18,
                            AreaID = 2,
                            TableName = "O8",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 19,
                            AreaID = 2,
                            TableName = "O9",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 20,
                            AreaID = 2,
                            TableName = "O10",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 21,
                            AreaID = 3,
                            TableName = "B1",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 22,
                            AreaID = 3,
                            TableName = "B2",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 23,
                            AreaID = 3,
                            TableName = "B3",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 24,
                            AreaID = 3,
                            TableName = "B4",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 25,
                            AreaID = 3,
                            TableName = "B5",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 26,
                            AreaID = 3,
                            TableName = "B6",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 27,
                            AreaID = 3,
                            TableName = "B7",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 28,
                            AreaID = 3,
                            TableName = "B8",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 29,
                            AreaID = 3,
                            TableName = "B9",
                            TableStatus = "Free"
                        },
                        new
                        {
                            TableID = 30,
                            AreaID = 3,
                            TableName = "B10",
                            TableStatus = "Free"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeanSceneSystem.Models.Reservation", b =>
                {
                    b.HasOne("BeanSceneSystem.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("SittingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneSystem.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableID");

                    b.Navigation("Schedule");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("BeanSceneSystem.Models.StaffPermission", b =>
                {
                    b.HasOne("BeanSceneSystem.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BeanSceneSystem.Models.Table", b =>
                {
                    b.HasOne("BeanSceneSystem.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeanSceneSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeanSceneSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanSceneSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeanSceneSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
